<script type="module">
import {
    pjclHex2BitArray,
    pjclBigInt2Hex,
    pjclBitArray2Hex,
    pjclString2BitArray_UTF16BE,
    pjclSHA256,
    pjclRBG128Instantiate,
    pjclRBGGen,
    pjclCurve_P256,
    pjclECDSAGenKeyPair
} from "./pjcl.js";
import { pjclBrowserEntropy128Bits } from "./browser-entropy.js";
import { readCSRFCookie } from "./utils.js";

const email = "{{email}}";
const emailVerifCodeHex = "{{emailVerifCodeHex}}";
const seed = "{{emailDerivedSeed}}";

const prefix = "2F-demo-app:" + email + ":";

function checkInputsAndSubmitFusionHash(submitEvent) {
    const passwordElt = document.getElementById("password");
    const password = passwordElt.value.replace(/^\s+/,"").replace(/\s+$/,"");
    const confirmElt = document.getElementById("confirm");
    const confirm = confirmElt.value.replace(/^\s+/,"").replace(/\s+$/,"");
    let s = "";
    if (password == "") {
        s += "Please enter your password";
    }
    if (confirm == "") {
        s += "Please confirm your password";
    }
    if (password !== confirm) {
       s += "The confirmation does not match the password";
    }
    const CSRFTokenElt = document.getElementById("CSRFToken");
    const CSRFCookie = readCSRFCookie();
    if (!CSRFCookie) {
	s += "No CSRF cookie found; try refreshing the page<br>";
    }
    else {
	CSRFTokenElt.value = CSRFCookie;
    }
    if (s) {
        document.getElementById("inputError").innerHTML = s;
        submitEvent.preventDefault();
    }
    else {
	// deterministic bit generation from the email-derived seed
	const obj = new Object();
	pjclRBG128Instantiate(obj,seed);
	
	// key pair generation
	const keyPair = pjclECDSAGenKeyPair(obj,pjclCurve_P256);
	const privKeyHex_d = pjclBigInt2Hex(keyPair.d);
	const pubKeyHex_Q_x = pjclBigInt2Hex(keyPair.Q.x);
	const pubKeyHex_Q_y = pjclBigInt2Hex(keyPair.Q.y);
	
	// secret salt generation
	const secretSalt = pjclRBGGen(obj,128,128);
	const secretSaltHex = pjclBitArray2Hex(secretSalt);
	
        // credential storage
	localStorage[prefix + "privKeyHex_d"] = privKeyHex_d;
	localStorage[prefix + "pubKeyHex_Q_x"] = pubKeyHex_Q_x;
	localStorage[prefix + "pubKeyHex_Q_y"] = pubKeyHex_Q_y;
	localStorage[prefix + "secretSaltHex"] = secretSaltHex;

	// secretSaltedPassword
	const passwordBits = pjclString2BitArray_UTF16BE(password);
	const secretSaltedPassword = pjclSHA256(secretSalt.concat(passwordBits));
	
	// fusion hash
	const pubKeyBits = pjclHex2BitArray(pubKeyHex_Q_x + pubKeyHex_Q_y);
	const fusionHashBits = pjclSHA256(secretSaltedPassword,pubKeyBits);
	const fusionHash = pjclBitArray2Hex(fusionHashBits);

	const fusionHashElt = document.getElementById("fusionHash");
	fusionHashElt.value = fusionHash;
    }
}

const formElt = document.getElementById("the-form");
formElt.addEventListener("submit", checkInputsAndSubmitFusionHash);

</script>

<h1>Please choose your password</h1>

<p>
<span style="color: red" id="inputError"></span>
</p>

<form id="the-form" action="/finalize-registration" method="post">
    <!-- only inputs with a name are submitted -->
    <!-- THE PASSWORD IS NOT SENT TO THE BACKEND -->

    <!-- hidden inputs, submitted -->
    <input type="hidden" name="CSRFToken" id="CSRFToken">
    <input type="hidden" name="email" value="{{email}}">
    <input type="hidden" name="emailVerifCodeHex" value="{{emailVerifCodeHex}}">
    <input type="hidden" name="fusionHash" id="fusionHash">

    <!-- shown inputs, not submitted -->
    Password:<br>
    <input type="password" id="password">
    <br>
    Confirm password:<br>
    <input type="password" id="confirm">
    <br>

    <br>
    <input type="submit" value="Submit">
</form> 

</script>
