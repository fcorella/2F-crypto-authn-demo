<script type="module">

import {
    pjclHex2BitArray,
    pjclBitArray2Hex,
    pjclHex2BigInt,
    pjclBigInt2Hex,
    pjclString2BitArray_UTF16BE,
    pjclSHA256,
    pjclRBG128InstantiateOrReseed,
    pjclCurve_P256,
    pjclECDSAGenKeyPair,
    pjclECDSASignMsg
} from "./pjcl.js";
import { pjclBrowserEntropy128Bits } from "./browser-entropy.js";
import { readCSRFCookie } from "./utils.js";

const email = "{{email}}";
const serverEntropyHex = "{{serverEntropyHex}}";
const challengeHex = "{{challengeHex}}";

const prefix = "2F-demo-app:" + email + ":";

function checkInputAndSubmitAuthnData(submitEvent) {
    const passwordElt = document.getElementById("password");
    const password = passwordElt.value.replace(/^\s+/,"").replace(/\s+$/,"");
    let s = "";
    if (password == "") {
        s+= "Please enter your password";
    }
    const CSRFTokenElt = document.getElementById("CSRFToken");
    const CSRFCookie = readCSRFCookie();
    if (!CSRFCookie) {
	s += "No CSRF cookie found; try refreshing the page<br>";
    }
    else {
	CSRFTokenElt.value = CSRFCookie;
    }
    if (s) {
        document.getElementById("inputError").innerHTML = s;
        submitEvent.preventDefault();
    }
    else {
        // random bit generation for the authentiation signature
	const serverEntropy = pjclHex2BitArray(serverEntropyHex);
	const entropy = pjclBrowserEntropy128Bits().concat(serverEntropy);
	pjclRBG128InstantiateOrReseed(localStorage,entropy);

        // key pair retrieval from localStorage
	const privKeyHex_d = localStorage[prefix + "privKeyHex_d"];
	const pubKeyHex_Q_x = localStorage[prefix + "pubKeyHex_Q_x"];
	const pubKeyHex_Q_y = localStorage[prefix + "pubKeyHex_Q_y"];

        // signature
	const d = pjclHex2BigInt(privKeyHex_d);
	const challenge = pjclHex2BitArray(challengeHex);
	const signature = pjclECDSASignMsg(localStorage,pjclCurve_P256,d,challenge);
	const sigHex_r = pjclBigInt2Hex(signature.r);
	const sigHex_s = pjclBigInt2Hex(signature.s);

        // secret salt and secret-salted password
	const secretSaltHex = localStorage[prefix + "secretSaltHex"];
	const secretSalt = pjclHex2BitArray(secretSaltHex);
	const passwordBits = pjclString2BitArray_UTF16BE(password);
	const secretSaltedPassword = pjclSHA256(secretSalt.concat(passwordBits));
	const secretSaltedPasswordHex = pjclBitArray2Hex(secretSaltedPassword);

	document.getElementById("pubKeyHex_Q_x").value = pubKeyHex_Q_x;
	document.getElementById("pubKeyHex_Q_y").value = pubKeyHex_Q_y;
	document.getElementById("sigHex_r").value = sigHex_r;
	document.getElementById("sigHex_s").value = sigHex_s;
	document.getElementById("secretSaltedPasswordHex").value = secretSaltedPasswordHex;
    }
}

const formElt = document.getElementById("the-form");
formElt.addEventListener("submit", checkInputAndSubmitAuthnData);

</script>

<h1>Please enter your password</h1>

<p>
<span style="color: red" id="inputError"></span>
</p>

<form id="the-form" action="/finalize-authentication" method="post">
    <!-- only inputs with a name are submitted -->
    <!-- THE PASSWORD IS NOT SENT TO THE BACKEND -->

    <!-- hidden inputs, submitted -->
    <input type="hidden" name="CSRFToken" id="CSRFToken">
    <input type="hidden" name="email" value="{{email}}">
    <input type="hidden" name="pubKeyHex_Q_x" id="pubKeyHex_Q_x">
    <input type="hidden" name="pubKeyHex_Q_y" id="pubKeyHex_Q_y">
    <input type="hidden" name="sigHex_r" id="sigHex_r">
    <input type="hidden" name="sigHex_s" id="sigHex_s">
    <input type="hidden" name="secretSaltedPasswordHex" id="secretSaltedPasswordHex">

    <!-- visible inputs, not submitted -->
    Password:<br>
    <input type="password" id="password">
    <br>

    <br>
    <input type="submit" value="Submit">
</form> 

</script>
